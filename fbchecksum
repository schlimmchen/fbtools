#!/usr/bin/python

import binascii
import sys, re

# TODO credits

################################################################################
# global pre-compiled regex objects for later matching
################################################################################

# TODO do we need to allow optional whitespaces before the end of the line?

# matches a key-value pair found on the top of the config
var_val_pair_regex = re.compile("^([\w]+)=([\S]+)$");

# matches begin marker of a config file
cfg_file_start_regex = re.compile("^\*{4} CFGFILE:([\S]+)$")

# macthes beging marker of a binary file
bin_file_start_regex = re.compile("^\*{4} BINFILE:([\S]+)$")

# matches end marker of config and binary files
any_file_end_regex = re.compile("^\*{4} END OF FILE \*{4}$")

# matches old/current checksum in config
current_checksum_regex = re.compile("^\*{4} END OF EXPORT ([0-9A-Za-z]{8}) \*{4}$")

################################################################################
# helper functions
################################################################################

def process_config_file(filename, lines):
    """ Concatenate the filename with NUL, then add all but the last line of
    the config file to the result string, converting double backslashes to
    single backslashes in each line. """
    result = str(filename) + '\0'
    for line in lines[:-1]:
        result += re.sub("\\\\\\\\", "\\\\", line)
    if lines[-1] != str("\n"):
        # TODO does the fritzbox also accept configs with no such newline?
        print "Whoops, I was expecting an empty line at the end of file \"%s\"!" % filename
        sys.exit(2)
    return result

def process_binary_file(filename, lines):
    """ Concatenate the filename with NUL, then add all bytes (line endings
    stripped) in the binary file to the result string (convert hexadecimal
    ASCII into binary). """
    result = str(filename) + '\0'
    for line in lines:
        result += binascii.unhexlify(line.strip())
    return result

def process_file(regex, handler, checksum_material, config_lines, line_index):
    # try to match the current line (file name line), return if it does not
    match = regex.match(config_lines[line_index]);
    if not match: return (False, line_index, checksum_material)

    # find borders of the file content and process it (add to checksum maaterial)
    file_start = line_index + 1
    file_end = file_start + 1
    while not any_file_end_regex.match(config_lines[file_end]):
        file_end += 1
    checksum_material += handler(match.group(1), config_lines[file_start:file_end])
    return (True, file_end + 1, checksum_material)

################################################################################
# main
################################################################################

def main():
    """ Read all lines in the exported config file and try to match them to
    the regexes defined above. If so, add the required info to the checksum
    material. For files, slice the file contents and let helper functions
    process them. """
    config_lines = list() # input (list of lines, line endings included)
    checksum_material = str() # accumulated data for CRC32 calculation

    if(len(sys.argv) < 2):
        print "Need argument (file to inspect)!"
        sys.exit(-1)

    filename = sys.argv[1]
    debug = 0

    try:
        with file(filename) as f:
            # replace CRLF line endings by LF line endings
            config_lines = [line.replace("\r\n", "\n") for line in f.readlines()]
    except Exception as e:
        print "ERROR: File \"%s\" could not be read." % filename
        if hasattr(e, "strerror"): print "ERROR: %s" % e.strerror
        sys.exit(-1);

    line_index = int(0)
    while line_index < len(config_lines):
        # handling of key-value-pairs relevant for checksum material
        match = var_val_pair_regex.match(config_lines[line_index]);
        if match:
            # concatenate key string with value string and NUL
            checksum_material += match.group(1) + match.group(2) + '\0';
            line_index += 1
            continue

        # handling of config files
        result, line_index, checksum_material = \
            process_file(cfg_file_start_regex, process_config_file, checksum_material, config_lines, line_index)
        if result: continue

        # handling of binary files
        result, line_index, checksum_material = \
            process_file(bin_file_start_regex, process_binary_file, checksum_material, config_lines, line_index)
        if result: continue

        # extract/print current checksum
        match = current_checksum_regex.match(config_lines[line_index]);
        if match:
            print "Current Checksum: %s" % match.groups(1)
            line_index += 1
            continue

        # line is ignored
        if debug > 0:
            print "Ignored (not relevant for checksum): %s" % config_lines[line_index].strip()
        line_index += 1

    print " Proper Checksum: %08X" % (binascii.crc32(checksum_material) & 0xffffffff)

if __name__ == '__main__':
    main()
